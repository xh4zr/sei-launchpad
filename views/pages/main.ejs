<!DOCTYPE html>
<html lang="en">
    <head>
        <title>Email Integration</title>
    </head>
    <style>
        #seiEmailIntegration {
            font-size: 1.2em;
        }
        #seiEmailIntegration p {
            font-family: Arial, Helvetica, sans-serif; font-size: 13px;
        }
        #seiEmailIntegration table, 
        #seiEmailIntegration tr, 
        #seiEmailIntegration td, 
        #seiEmailIntegration tbody, 
        #seiEmailIntegration thead, 
        #seiEmailIntegration th {
            border: none; border-collapse: inherit; border-spacing: 0;
            vertical-align: top;
            text-align: left;
            font-weight: inherit;
            -webkit-border-horizontal-spacing: 0;
            -webkit-border-vertical-spacing: 0;
        }
        #seiEmailIntegration table {
            width: 100%;
            }
        #seiEmailIntegration tr td:nth-child(3) {
            width: 20%;
        }
        #seiEmailIntegration table td {
            padding: 5px;
        }
        #seiEmailIntegration #lastRow button {
            float:right;
        }
        #seiEmailIntegration table td:nth-child(1) {
            width: 40%;
        }
        #seiEmailIntegration table td button {
            float: right;
            background: transparent;
        }
        #seiEmailIntegration tr:nth-child(odd){
            background: #eee;
        }
        #seiEmailIntegration tr:last-child {
            background: #fff;
        }
        #seiEmailIntegration input[type="text"],
        #seiEmailIntegration input[type="email"] {
            font-size: 16px;
            padding: 5px;
            border:1px solid transparent; 
            width: 90%;
            background: transparent;
            transition: all .25s;
        }
        #seiEmailIntegration button[type="submit"] {
            background: #be1515;
            color: #ffffff;
            border-radius: 3px;
            padding: 5px 25px;
            font-size: 16px;
            margin-top: 30px;
            cursor: pointer;
        }
        #seiEmailIntegration button[type="submit"]:hover {
            background:#A01010;
        }
        #seiEmailIntegration input:focus[type="text"],
        #seiEmailIntegration input:hover[type="text"],
        #seiEmailIntegration input:focus[type="email"],
        #seiEmailIntegration input:hover[type="email"] {
            background: #fff;
            outline:none;
            border:1px solid #ccc;
        }
        #seiEmailIntegration button {
            border:none;
            font-size: 16px;
        }
        #seiEmailIntegration button#addRow  {
            background: #333;
            color: #fff;
            padding: 5px 15px;
            border:none;
            border-radius: 3px;
            font-size: 13px;
            float:right;
            cursor: pointer;
        }
        ::-webkit-input-placeholder { 
        color: #666;
        font-size: 12px;
        font-style: italic;
        }
        ::-moz-placeholder { 
        color: #ccc;
        }
        :-ms-input-placeholder { 
        color: #ccc;
        }
        :-moz-placeholder { 
        color: #ccc;
        }
    </style>

    <body class="container">
        <main id="seiEmailIntegration">
            <p>
                Upload a .csv:<br> <input id="uploadCSV" type="file">
            </p>
            <form method="POST">
                <input name="examName" type="hidden" value="<%= examName %>">
                <input name="emailKey" type="hidden" value="<%= emailKey %>">
                <table>
                    <tbody id="examineeList">
                        <tr class="row">
                            <td><input name="email[]" type="email" required placeholder="Email"></td>
                            <td>
                                <% for(var i = 0; i < examineeSchema.length; i++) { %>
                                    <input name="<%= examineeSchema[i].key %>[]" type="text" <% if (examineeSchema[i].required) { %>required<% } %> placeholder="<%= examineeSchema[i].key %>"><br>
                                <% } %>
                            </td>
                            <td><button class="removeRow" type="button">X</button></td>
                        </tr>
                        <tr id="lastRow">
                            <td></td>
                            <td></td>
                            <td><button id="addRow" type="button">+ Add</button></td>
                        </tr>
                    </tbody>
                </table>
                <p>Submit this form to send delivery links to the email adresses listed above.<br>
                <button type="submit">Submit</button>
            </p>
            </form>
        </main>
        <div hidden>
            <table>
                <tr id="rowClone">
                    <td><input name="email[]" type="email" required placeholder="Email"></td>
                    <td>
                        <% for(var i = 0; i < examineeSchema.length; i++) { %>
                            <input name="<%= examineeSchema[i].key %>[]" type="text" <% if (examineeSchema[i].required) { %>required<% } %> placeholder="<%= examineeSchema[i].key %>"><br>
                        <% } %>
                    </td>
                    <td><button class="removeRow" type="button">X</button></td>
                </tr>
            </table>
        </div>
    </body>
    <script>
        document.addEventListener('DOMContentLoaded', init);

        function init() {
            registerListeners();
        }

        function registerListeners() {
            document.getElementById('addRow').addEventListener('click', addRow);
            document.querySelector('tr td button.removeRow').addEventListener('click', removeRow);
            document.getElementById('uploadCSV').addEventListener('change', uploadCSV);
        }

        function addRow(event) {
            var row = document.getElementById('rowClone').cloneNode(true);
            row.removeAttribute('id');
            var child = document.getElementById('examineeList').insertBefore(row, document.getElementById('lastRow'));
            child.querySelector('tr td button.removeRow').addEventListener('click', removeRow);
        }

        function addRowWithData(keys, data) {
            var row = document.getElementById('rowClone').cloneNode(true);
            row.removeAttribute('id');
            var inputs = row.querySelectorAll('td input');
            for (var i = 0; i < inputs.length; i++) {
                var input = inputs[i];
                var name = input.name.split('[')[0];
                var index = keys.indexOf(name);
                inputs[i].value = data[index];
            }
            var child = document.getElementById('examineeList').insertBefore(row, document.getElementById('lastRow'));
            child.querySelector('tr td button.removeRow').addEventListener('click', removeRow);
        }

        function removeRow(event) {
            document.getElementById('examineeList').removeChild(event.target.parentElement.parentElement);
        }

        function uploadCSV(evt) {
            var files = evt.target.files;
            for (var i = 0, f; f = files[i]; i++) {
                var reader = new FileReader();

                reader.onload = function(e) {
                    var text = reader.result;
                    var arr = CSVToArray(text);
                    var keys = arr[0];
                    for (var i = 1; i < arr.length; i++) {
                        addRowWithData(keys, arr[i]);
                    }
                };

                reader.readAsText(f);
            }
        }

        // https://stackoverflow.com/questions/1293147/javascript-code-to-parse-csv-data
        function CSVToArray(strData, strDelimiter) {
            // Check to see if the delimiter is defined. If not,
            // then default to comma.
            strDelimiter = (strDelimiter || ",");

            // Create a regular expression to parse the CSV values.
            var objPattern = new RegExp(
                (
                    // Delimiters.
                    "(\\" + strDelimiter + "|\\r?\\n|\\r|^)" +

                    // Quoted fields.
                    "(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|" +

                    // Standard fields.
                    "([^\"\\" + strDelimiter + "\\r\\n]*))"
                ),
                "gi"
            );


            // Create an array to hold our data. Give the array
            // a default empty first row.
            var arrData = [[]];

            // Create an array to hold our individual pattern
            // matching groups.
            var arrMatches = null;


            // Keep looping over the regular expression matches
            // until we can no longer find a match.
            while (arrMatches = objPattern.exec(strData)) {

                // Get the delimiter that was found.
                var strMatchedDelimiter = arrMatches[1];

                // Check to see if the given delimiter has a length
                // (is not the start of string) and if it matches
                // field delimiter. If id does not, then we know
                // that this delimiter is a row delimiter.
                if (
                    strMatchedDelimiter.length &&
                    strMatchedDelimiter !== strDelimiter
                ) {

                    // Since we have reached a new row of data,
                    // add an empty row to our data array.
                    arrData.push([]);

                }

                var strMatchedValue;

                // Now that we have our delimiter out of the way,
                // let's check to see which kind of value we
                // captured (quoted or unquoted).
                if (arrMatches[2]) {

                    // We found a quoted value. When we capture
                    // this value, unescape any double quotes.
                    strMatchedValue = arrMatches[2].replace(
                        new RegExp("\"\"", "g"),
                        "\""
                    );

                } else {

                    // We found a non-quoted value.
                    strMatchedValue = arrMatches[3];

                }


                // Now that we have our value string, let's add
                // it to the data array.
                arrData[arrData.length - 1].push(strMatchedValue);
            }

            // Return the parsed data.
            return (arrData);
        }
    </script>
</html>